# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-jar-job:
    runs-on: ubuntu-latest

    steps:
    - name: checkout from git
      uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Install gpg secret key
      run: |
        cat <(echo -e "${{ secrets.OSSRH_GPG_SECRET_KEY }}") | gpg --batch --import
        gpg --list-secret-keys --keyid-format LONG
    - id: build_jar
      name: Build JAR
      env:
        OPENEPCIS_OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        OPENEPCIS_OSSRH_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
      run: |
        mvn \
          -s .mvn/settings.xml \
          --no-transfer-progress \
          --batch-mode \
          clean package
    - name: 'Get Version Number'
      env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      run: |
        echo "::set-env name=VERSION::$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)"
    - name: 'Publish JAR'
      uses: actions/upload-artifact@v3
      with:
        name: all-jar
        path: 'target/openepcis-event-hash-generator-utility-${{env.VERSION}}-jar-with-dependencies.jar'
    - name: 'Create Release'
      if: contains(github.ref, 'v')
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      with:
        tag_name: ${{github.ref}}
        release_name: Release ${{github.ref}}
        body: |
          Initial release
        draft: false
        prerelease: false
    - name: 'Upload Release Asset'
      if: contains(github.ref, 'v')
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      with:
        upload_url: ${{steps.create_release.outputs.upload_url}}
        asset_path: 'target/openepcis-event-hash-generator-utility-${{env.VERSION}}-jar-with-dependencies.jar'
        asset_name: 'openepcis-event-hash-generator-utility-${{env.VERSION}}-jar-with-dependencies.jar'
        asset_content_type: application/java-archive
    - name: 'Write Upload URL To File'
      if: contains(github.ref, 'v')
      run: |
        echo "${{steps.create_release.outputs.upload_url}}" > upload_url.txt
    - name: 'Publish Upload URL'
      if: contains(github.ref, 'v')
      uses: actions/upload-artifact@v2-preview
      with:
        name: 'upload_url.txt'
        path: 'upload_url.txt'

  build-linux-image:
    needs: [build-jar-job]
    name: 'Build Linux Image'
    runs-on: ubuntu-latest
    steps:
      - name: checkout from git
        uses: actions/checkout@v3
      - name: Set up GraalVM
        uses: DeLaGuardo/setup-graalvm@2.0
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        with:
          graalvm-version: '22.1.0.java17'
      - name: 'Install Native Image Plugin'
        run: |
          gu install native-image
      - name: 'Get Version Number'
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        run: |
          echo "::set-env name=VERSION::$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)"
      - name: 'Get JAR Artifact'
        uses: actions/download-artifact@v3
        with:
          name: all-jar
      - name: 'Build Linux Image'
          run: |
            native-image --no-server --no-fallback -H:ReflectionConfigurationResources=reflection-config.json -H:IncludeResources=logback.xml --allow-incomplete-classpath -jar openepcis-event-hash-generator-utility-jar-with-dependencies.jar

      - name: 'Download Release URL'
        if: contains(github.ref, 'v')
        uses: actions/download-artifact@v2-preview
        with:
          name: 'upload_url.txt'

      - name: 'Set Upload URL Env Var'
        if: contains(github.ref, 'v')
        run: |
          echo "::set-env name=UPLOAD_URL::$(cat upload_url.txt)"

      - id: build-linux-native
        name: Build Linux Native
        env:
          OPENEPCIS_OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OPENEPCIS_OSSRH_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
        run: |
          mvn \
            -s .mvn/settings.xml \
            --no-transfer-progress \
            --batch-mode \
            -Dgpg.passphrase=${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }} \
            -Popenepcis-ossrh \
            -Pnative \
            clean package